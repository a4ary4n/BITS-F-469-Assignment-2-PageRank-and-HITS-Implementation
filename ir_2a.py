# -*- coding: utf-8 -*-
"""IR-2A.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KMv062yZMbsRL2WthZEDZ5S8lQ67uH0P
"""

import numpy as np
import numpy.linalg as la
import timeit
import matplotlib.pyplot as plt
import csv

class Graph(object):
  def __init__(self, n, e):
    self.adj_mat = [[0]*n for i in range(n)]
    self.size = e
  
  def add_edges(self, a, b):
    a -= 1
    b -= 1
    self.adj_mat[b][a] = 1
  
  def tra_mat(self):
    tra_mat = self.adj_mat
    r = len(tra_mat)
    c = len(tra_mat[0])

    for i in range(c):
      count = 0
      for j in range(r):
        if tra_mat[j][i] == 1:
          count += 1
      if count == 0:
        continue
      for j in range(r):
       tra_mat[j][i] /= count

    return tra_mat

  def lin_alg(self,n):
    mat = np.array(self.tra_mat())
    d = 0.1
    M = d * mat + (1-d)/n * np.ones(n)
    eig_vals, eig_vecs = la.eig(M)
    ord = np.absolute(eig_vals).argsort()[::-1]
    eig_vals = eig_vals[ord]
    eig_vecs = eig_vecs[:,ord]
    r = eig_vecs[:, 0]
    r = 100*np.real(r / np.sum(r))

    return r

  def power_iter(self, n):
    result = []
    mat = np.array(self.tra_mat())
    d = 0.1
    M = d * mat + (1-d)/n * np.ones(n)
    r = 100*np.ones(n) / n
    
    pistart = timeit.default_timer()
    for i in range(100) : 
        r = M @ r
    pistop = timeit.default_timer()
    result.append(r)
    result.append(pistop - pistart)
    return result

  def conv_pi(self,n):
    mat = np.array(self.tra_mat())
    d = 0.1
    M = d * mat + (1-d)/n * np.ones(n)
    r = 100*np.ones(n) / n
    lastR = r
    r = M @ r
    i = 0
    while la.norm(lastR - r) > 0.01 :
        lastR = r
        r = M @ r
        i += 1
    print(str(i) + " iterations until convergence")
    return r

if __name__ == "__main__":
  n, e = map(int, input().split())
  g = Graph(n, e)
  for i in range(e):
    u, v = map(int, input().split())
    g.add_edges(u, v) 

  print(g.lin_alg(n))

  result = g.power_iter(n) 
  print(result[0])

  print(g.conv_pi(n))

  print("time :" + str(result[1]))